<?php

/*
* Copyright 2014 HLP-Nebula authors, see NOTICE file
*
* Licensed under the EUPL, Version 1.1 or â€“ as soon they
will be approved by the European Commission - subsequent
versions of the EUPL (the "Licence");
* You may not use this work except in compliance with the
Licence.
* You may obtain a copy of the Licence at:
*
*
http://ec.europa.eu/idabc/eupl
*
* Unless required by applicable law or agreed to in
writing, software distributed under the Licence is
distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied.
* See the Licence for the specific language governing
permissions and limitations under the Licence.
*/ 


namespace HLP\NebulaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BuildRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BuildRepository extends EntityRepository
{
    public function findOneWithParents($parameters)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->leftJoin('u.branch', 'b')
            ->addSelect('b')
            ->leftJoin('u.meta', 'm')
            ->addSelect('m')
            ->where('m.metaId = :meta')
            ->andWhere('b.branchId = :branch')
            ->andWhere('u.version = :version')
            ->setParameter('meta', $parameters['meta'])
            ->setParameter('branch', $parameters['branch'])
            ->setParameter('version', $parameters['version']);
        
        return $queryBuilder->getQuery()
            ->getOneOrNullResult();
    }
    
    public function getBuilds($branch, $page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.branch', 'b')
            ->where('b = :branch')
            ->setParameter('branch', $branch)
            ->getQuery();

        $query
            ->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }
    
    public function findSingleBuild($metaId, $branchId = null, $version = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from('HLPNebulaBundle:Build', 'u')
            ->leftJoin('u.branch', 'b')
            ->addSelect('b')
            ->leftJoin('b.meta', 'm')
            ->addSelect('m')
            ->andWhere('m.metaId = :metaId')
            ->setParameter('metaId', $metaId);

        if(isset($branchId))
        {
            $qb->andWhere('b.branchId = :branchId')
                ->setParameter('branchId', $branchId);
        }
        else
        {
            $qb->andWhere('b.isDefault = true');
        }

        if(isset($version))
        {
            $qb->andWhere('u.version = :version')
                ->setParameter('version', $version);
        }
        else
        {
            $qb->andWhere('u.state = :state')
                ->orderBy('u.versionMajor', 'DESC')
                ->addOrderBy('u.versionMinor', 'DESC')
                ->addOrderBy('u.versionPatch', 'DESC')
                ->setMaxResults(1)
                ->setParameter('state', Build::DONE);
        }

        return $qb->getQuery()
            ->getOneOrNullResult();
    }
}
