<?php

/*
* Copyright 2014 HLP-Nebula authors, see NOTICE file

*
* Licensed under the EUPL, Version 1.1 or â€“ as soon they
will be approved by the European Commission - subsequent
versions of the EUPL (the "Licence");
* You may not use this work except in compliance with the
Licence.
* You may obtain a copy of the Licence at:
*
*
http://ec.europa.eu/idabc/eupl

*
* Unless required by applicable law or agreed to in
writing, software distributed under the Licence is
distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied.
* See the Licence for the specific language governing
permissions and limitations under the Licence.
*/

namespace HLP\NebulaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BranchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchRepository extends EntityRepository
{
    public function findOneWithParent($parameters)
    {
        $queryBuilder = $this->createQueryBuilder('b')
            ->leftJoin('b.meta', 'm')
            ->addSelect('m')
            ->where('m.metaId = :meta')
            ->andWhere('b.branchId = :branchId')
            ->setParameter('meta', $parameters['meta'])
            ->setParameter('branchId', $parameters['branchId']);

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function getBranchQueryBuilder($meta, $page = 1, $nbPerPage = 0)
    {
        $qb = $this->createQueryBuilder('b')
            ->leftJoin('b.meta', 'm');

        if ($meta !== null) {
            $qb->where('m = :meta')
                ->setParameter('meta', $meta);
        }

        return $qb;
    }

    public function getBranches($meta = null, $page = 1, $nbPerPage = 0)
    {
        return $this->getBranchQueryBuilder($meta, $page, $nbPerPage)->getQuery()->getResult();
    }

    public function getPublicBranches($meta = null)
    {
        return $this->getBranchQueryBuilder($meta)
            ->where('b.public = true')->getQuery()->getResult();
    }

    public function getDefaultBranches()
    {
        return $this->getBranchQueryBuilder(null)
            ->where('b.isDefault = true')->getQuery()->getResult();
    }

    public function findSingleBranch($metaId, $branchId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('b')
            ->from('HLPNebulaBundle:Branch', 'b')
            ->leftJoin('b.meta', 'm')
            ->addSelect('m')
            ->andWhere('m.metaId = :metaId')
            ->setParameter('metaId', $metaId);

        if(isset($branchId))
        {
            $qb->andWhere('b.branchId = :branchId')->setParameter('branchId', $branchId);
        }
        else
        {
            $qb->andWhere('b.isDefault = true');
        }


        return $qb->getQuery()->getOneOrNullResult();
    }
}
